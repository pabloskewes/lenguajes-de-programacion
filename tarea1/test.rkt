#lang play
(require "T1.rkt")

(print-only-errors #t)

(test (Prop? (varp "a")) #t)
(test (Prop? (notp (varp "a"))) #t)
(test (Prop? (andp (varp "a") (varp "b"))) #t)
(test (Prop? (orp (varp "a") (varp "b"))) #t)
(test (Prop? (list "a")) #f)
(test (varp? (varp "a")) #t)
(test (varp? (notp (varp "a"))) #f)
(test (notp? (varp "a")) #f)
(test (notp? (notp (varp "a"))) #t)
(test (andp? (varp "a")) #f)
(test (andp? (andp (varp "a") (varp "b"))) #t)
(test (orp? (varp "a")) #f)
(test (orp? (orp (varp "a") (varp "b"))) #t)

(test (print-prop (varp "a")) "a")
(test (print-prop (notp (varp "a"))) "~(a)")
(test (print-prop (andp (varp "a") (varp "b"))) "(a ^ b)")
(test (print-prop (orp (varp "a") (varp "b"))) "(a v b)")
(test (print-prop (andp (varp "a") (orp (varp "a") (varp "b")))) "(a ^ (a v b))")
(test (print-prop (orp (varp "a") (notp (varp "a")))) "(a v ~(a))")
(test (print-prop (orp (andp (varp "a") (varp "b")) (orp (varp "a") (varp "b")))) "((a ^ b) v (a v b))")

(test (occurrences (varp "a") "a") 1)
(test (occurrences (varp "a") "b") 0)
(test (occurrences (notp (varp "a")) "a") 1)
(test (occurrences (notp (varp "a")) "b") 0)
(test (occurrences (andp (varp "a") (varp "b")) "a") 1)
(test (occurrences (andp (varp "a") (varp "b")) "b") 1)
(test (occurrences (andp (varp "a") (varp "b")) "c") 0)
(test (occurrences (orp (varp "a") (varp "b")) "a") 1)
(test (occurrences (orp (varp "a") (varp "b")) "b") 1)
(test (occurrences (orp (varp "a") (varp "b")) "c") 0)
(test (occurrences (andp (varp "a") (orp (varp "a") (varp "b"))) "a") 2)

(test (vars (varp "a")) (list "a"))
(test (vars (notp (varp "a"))) (list "a"))
(test (vars (andp (varp "a") (varp "b"))) (list "a" "b"))
(test (vars (orp (varp "a") (varp "b"))) (list "a" "b"))
(test (vars (andp (varp "a") (orp (varp "a") (varp "b")))) (list "a" "b"))

(test (all-environments (list )) (list (list )))
(test (all-environments (list "a")) (list (list (cons "a" #t)) (list (cons "a" #f))))
(test (all-environments (list "a" "b")) (list (list (cons "a" #t) (cons "b" #t))
                                              (list (cons "a" #t) (cons "b" #f))
                                              (list (cons "a" #f) (cons "b" #t))
                                              (list (cons "a" #f) (cons "b" #f))))

                                              (test (eval (varp "a") (list (cons "a" #t))) #t)

(test (eval (varp "a") (list (cons "a" #f))) #f)
(test (eval (notp (varp "a")) (list (cons "a" #t))) #f)
(test (eval (andp (varp "a") (varp "b")) (list (cons "a" #t) (cons "b" #t))) #t)
(test (eval (andp (varp "a") (varp "b")) (list (cons "a" #t) (cons "b" #f))) #f)
(test (eval (andp (varp "a") (varp "b")) (list (cons "a" #f) (cons "b" #t))) #f)
(test (eval (orp (varp "a") (varp "b")) (list (cons "a" #t) (cons "b" #t))) #t)
(test (eval (orp (varp "a") (varp "b")) (list (cons "a" #t) (cons "b" #f))) #t)
(test (eval (orp (varp "a") (varp "b")) (list (cons "a" #f) (cons "b" #f))) #f)
(test (eval (andp (varp "a") (orp (varp "a") (varp "b"))) (list (cons "a" #t) (cons "b" #f))) #t)
(test/exn (eval (varp "a") (list (cons "b" #t))) "not defined in environment")
(test/exn (eval (varp "a") (list )) "not defined in environment")

(test (tautology? (varp "a")) #f)
(test (tautology? (notp (varp "a"))) #f)
(test (tautology? (andp (varp "a") (varp "b"))) #f)
(test (tautology? (orp (varp "a") (varp "b"))) #f)
(test (tautology? (andp (varp "a") (orp (varp "a") (varp "b")))) #f)
(test (tautology? (orp (varp "a") (notp (varp "a")))) #t)

(test (simplify-negations (notp (notp (varp "a")))) (varp "a"))
(test (simplify-negations (notp (andp (varp "a") (varp "b")))) (orp (notp (varp "a")) (notp (varp "b"))))
(test (simplify-negations (notp (orp (varp "a") (varp "b")))) (andp (notp (varp "a")) (notp (varp "b"))))
(test (simplify-negations (notp (notp (andp (varp "a") (varp "b"))))) (andp (varp "a") (varp "b")))
(test (simplify-negations (notp (notp (orp (varp "a") (varp "b"))))) (orp (varp "a") (varp "b")))
(test (simplify-negations (notp (orp (notp (varp "a")) (varp "b")))) (andp (notp (notp (varp "a"))) (notp (varp "b"))))

(test (distribute-and (andp (varp "a") (orp (varp "b") (varp "c")))) (orp (andp (varp "a") (varp "b")) (andp (varp "a") (varp "c"))))
(test (distribute-and (andp (orp (varp "a") (varp "b")) (varp "c"))) (orp (andp (varp "a") (varp "c")) (andp (varp "b") (varp "c"))))
(test (distribute-and (andp (varp "a") (varp "b"))) (andp (varp "a") (varp "b")))
(test (distribute-and (orp (varp "a") (varp "b"))) (orp (varp "a") (varp "b")))
(test (distribute-and (notp (varp "a"))) (notp (varp "a")))
(test (distribute-and (andp (notp (varp "a")) (orp (varp "b") (varp "c")))) (orp (andp (notp (varp "a")) (varp "b")) (andp (notp (varp "a")) (varp "c"))))

(test ((apply-until (lambda (x) (+ x 1)) (lambda (x new-x) (> new-x 10))) 0) 11)
(test ((apply-until (lambda (x) (/ x (add1 x))) (lambda (x new-x) (<= (- x new-x) 0.1))) 1) 0.25)
(define (drop-one-item lst item)
    (match lst
        ['() '()]
        [(cons head tail) (if 
                            (equal? head item)
                            tail
                            (cons head (drop-one-item tail item)))]))
(test ((apply-until (lambda (lst) (drop-one-item lst 1)) (lambda (lst new-lst) (equal? lst new-lst))) (list 1 1 2 3 1 4 1 5)) (list 2 3 4 5))

(test (DNF (andp (varp "a") (orp (varp "b") (varp "c"))))
    (orp (andp (varp "a") (varp "b")) (andp (varp "a") (varp "c"))))
(test 
    (DNF (andp (orp (varp "a") (varp "b")) (orp (varp "c") (varp "d"))))
    (orp
        (orp (andp (varp "a") (varp "c"))
            (andp (varp "a") (varp "d")))
        (orp (andp (varp "b") (varp "c"))
            (andp (varp "b") (varp "d")))
    )
)
(test 
    (DNF (orp (notp (notp (andp (varp "a") (orp (varp "b") (varp "c"))))) (orp (varp "f") (varp "g"))))
    (orp
        (orp (andp (varp "a") (varp "b")) (andp (varp "a") (varp "c")))
        (orp (varp "f") (varp "g"))
    )
)

(test ((fold-prop (lambda (v) 1) + + +) (varp "a")) 1)

(test (occurrences-2 (varp "a") "a") 1)
(test (occurrences-2 (varp "a") "b") 0)
(test (occurrences-2 (notp (varp "a")) "a") 1)
(test (occurrences-2 (notp (varp "a")) "b") 0)
(test (occurrences-2 (andp (varp "a") (varp "b")) "a") 1)
(test (occurrences-2 (andp (varp "a") (varp "b")) "b") 1)
(test (occurrences-2 (andp (varp "a") (varp "b")) "c") 0)
(test (occurrences-2 (orp (varp "a") (varp "b")) "a") 1)
(test (occurrences-2 (orp (varp "a") (varp "b")) "b") 1)
(test (occurrences-2 (orp (varp "a") (varp "b")) "c") 0)
(test (occurrences-2 (andp (varp "a") (orp (varp "a") (varp "b"))) "a") 2)

(test (vars-2 (varp "a")) (list "a"))
(test (vars-2 (notp (varp "a"))) (list "a"))
(test (vars-2 (andp (varp "a") (varp "b"))) (list "a" "b"))
(test (vars-2 (orp (varp "a") (varp "b"))) (list "a" "b"))
(test (vars-2 (andp (varp "a") (orp (varp "a") (varp "b")))) (list "a" "b"))

(test (eval-2 (varp "a") (list (cons "a" #t))) #t)
(test (eval-2 (varp "a") (list (cons "a" #f))) #f)
(test (eval-2 (notp (varp "a")) (list (cons "a" #t))) #f)
(test (eval-2 (andp (varp "a") (varp "b")) (list (cons "a" #t) (cons "b" #t))) #t)
(test (eval-2 (andp (varp "a") (varp "b")) (list (cons "a" #t) (cons "b" #f))) #f)
(test (eval-2 (andp (varp "a") (varp "b")) (list (cons "a" #f) (cons "b" #t))) #f)
(test (eval-2 (orp (varp "a") (varp "b")) (list (cons "a" #t) (cons "b" #t))) #t)
(test (eval-2 (orp (varp "a") (varp "b")) (list (cons "a" #t) (cons "b" #f))) #t)
(test (eval-2 (orp (varp "a") (varp "b")) (list (cons "a" #f) (cons "b" #f))) #f)
(test (eval-2 (andp (varp "a") (orp (varp "a") (varp "b"))) (list (cons "a" #t) (cons "b" #f))) #t)
(test/exn (eval-2 (varp "a") (list (cons "b" #t))) "not defined in environment")
(test/exn (eval-2 (varp "a") (list )) "not defined in environment")

(test (simplify-negations-2 (notp (notp (varp "a")))) (varp "a"))
(test (simplify-negations-2 (notp (andp (varp "a") (varp "b")))) (orp (notp (varp "a")) (notp (varp "b"))))
(test (simplify-negations-2 (notp (orp (varp "a") (varp "b")))) (andp (notp (varp "a")) (notp (varp "b"))))
(test (simplify-negations-2 (notp (orp (notp (varp "a")) (varp "b")))) (andp (notp (notp (varp "a"))) (notp (varp "b"))))

(test (distribute-and-2 (andp (varp "a") (varp "b"))) (andp (varp "a") (varp "b")))
(test (distribute-and-2 (orp (varp "a") (varp "b"))) (orp (varp "a") (varp "b")))
